# Generated by Django 4.2.5 on 2023-11-05 14:39

from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone
import main.models.promo
import main.models.user


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='Build',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_created=True, auto_now_add=True, verbose_name='Дата создания')),
                ('import_id', models.IntegerField(verbose_name='Build ID')),
                ('description', models.TextField(blank=True, null=True, verbose_name='Описание')),
                ('address', models.CharField(blank=True, max_length=120, null=True, verbose_name='Адрес')),
                ('ready_year', models.IntegerField(default=0, verbose_name='Год готовности')),
                ('ready_quarter', models.IntegerField(default=0, verbose_name='Квартал готовности')),
                ('floors', models.IntegerField(default=0)),
                ('type', models.CharField(blank=True, max_length=20, null=True, verbose_name='Тип дома')),
                ('state', models.CharField(blank=True, max_length=12, null=True, verbose_name='Стадия')),
                ('phase', models.CharField(blank=True, max_length=10, null=True, verbose_name='Очередь')),
                ('section', models.CharField(blank=True, max_length=150, null=True, verbose_name='Секция')),
                ('name', models.CharField(blank=True, max_length=100, null=True, verbose_name='Название')),
                ('lift', models.IntegerField(default=0, verbose_name='Количество лифтов')),
                ('parking', models.IntegerField(default=0, verbose_name='Количество паркингов')),
                ('lat', models.FloatField(default=0)),
                ('lon', models.FloatField(default=0)),
                ('height', models.FloatField(default=0, verbose_name='Высота потолка')),
                ('security', models.BooleanField(default=False, verbose_name='Охраняется?')),
                ('house_class', models.CharField(choices=[('эконом', 'эконом'), ('комфорт', 'комфорт'), ('бизнес', 'бизнес'), ('элитное', 'элитное')], default='комфорт', max_length=50, verbose_name='Класс жилья')),
                ('need_confirm', models.BooleanField(default=False, verbose_name='Требует подтверждение')),
                ('avito_id', models.IntegerField(blank=True, null=True, verbose_name='Avito ID')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Дата обновления')),
                ('is_deleted', models.BooleanField(default=False, verbose_name='Удалена?')),
                ('hide', models.BooleanField(default=False, verbose_name='Спрятана?')),
            ],
            options={
                'verbose_name': 'строение',
                'verbose_name_plural': 'строения',
                'db_table': 'buildings',
            },
        ),
        migrations.CreateModel(
            name='Complex',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_created=True, auto_now_add=True, verbose_name='Дата создания')),
                ('import_id', models.IntegerField(verbose_name='Complex ID')),
                ('name', models.CharField(max_length=75, verbose_name='Название')),
                ('address', models.CharField(max_length=120, verbose_name='Адрес')),
                ('district', models.CharField(blank=True, max_length=120, null=True, verbose_name='Район')),
                ('source', models.CharField(max_length=10, verbose_name='Источник')),
                ('description', models.CharField(blank=True, max_length=255, null=True, verbose_name='Описание')),
                ('school', models.IntegerField(default=0, verbose_name='Количество школ')),
                ('kindergarten', models.IntegerField(default=0, verbose_name='Количество детских садов')),
                ('bank', models.IntegerField(default=0, verbose_name='Количество банков')),
                ('magazine', models.IntegerField(default=0, verbose_name='Количество магазинов')),
                ('fitness', models.IntegerField(default=0, verbose_name='Количество фитнес-центров')),
                ('health', models.IntegerField(default=0, verbose_name='Количество больниц')),
                ('church', models.IntegerField(default=0, verbose_name='Количество церквей')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Дата обновления')),
                ('is_deleted', models.BooleanField(default=False, verbose_name='Удален?')),
                ('hide', models.BooleanField(default=False, verbose_name='Спрятан?')),
            ],
            options={
                'verbose_name': 'комплекс',
                'verbose_name_plural': 'комплексы',
                'db_table': 'complexes',
            },
        ),
        migrations.CreateModel(
            name='Developer',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_created=True, auto_now_add=True, verbose_name='Дата создания')),
                ('name', models.CharField(max_length=120, verbose_name='Название')),
                ('description', models.TextField(blank=True, null=True, verbose_name='Описание застройщика')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Дата обновления')),
                ('is_deleted', models.BooleanField(default=False, verbose_name='Удален?')),
            ],
            options={
                'verbose_name': 'строитель',
                'verbose_name_plural': 'строители',
                'db_table': 'developers',
            },
        ),
        migrations.CreateModel(
            name='Flat',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_created=True, auto_now_add=True, verbose_name='Дата создания')),
                ('import_id', models.IntegerField(verbose_name='Flat ID')),
                ('decoration', models.CharField(default='Черновая отделка', max_length=50, verbose_name='Отделка')),
                ('type', models.CharField(blank=True, max_length=30, null=True, verbose_name='Тип')),
                ('rooms', models.IntegerField(default=1, verbose_name='Количество комнат')),
                ('floor', models.IntegerField(default=1, verbose_name='Этаж')),
                ('total_square', models.FloatField(default=0, verbose_name='Площадь')),
                ('price', models.FloatField(default=0, verbose_name='Стоимость квартиры')),
                ('yandex_internal_id', models.IntegerField(default=0)),
                ('category', models.CharField(max_length=50, verbose_name='Категория')),
                ('description', models.TextField(blank=True, null=True, verbose_name='Описание')),
                ('balcony', models.CharField(blank=True, max_length=50, null=True, verbose_name='Балконы')),
                ('bathroom_unit', models.CharField(blank=True, max_length=15, null=True, verbose_name='Санузел')),
                ('living_square', models.FloatField(default=0, verbose_name='Жилая площадь')),
                ('kitchen_square', models.FloatField(default=0, verbose_name='Площадь кухни')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Дата обновления')),
                ('is_deleted', models.BooleanField(default=False, verbose_name='Удален?')),
                ('hide', models.BooleanField(default=False, verbose_name='Спрятан с авито?')),
                ('views', models.IntegerField(default=0, verbose_name='Просмотры объявления')),
                ('build', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='main.build', verbose_name='Дом')),
            ],
            options={
                'verbose_name': 'квартира',
                'verbose_name_plural': 'квартиры',
                'db_table': 'flats',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='Promo',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('photo', models.FileField(help_text='Фото формата .png, .jpg, .jpeg. Не более 2мб', upload_to=main.models.promo.promo_directory_path, verbose_name='Фото')),
                ('name', models.CharField(max_length=50, verbose_name='Название')),
                ('description', models.TextField(verbose_name='Описание')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Дата создания')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Дата обновления')),
                ('is_deleted', models.BooleanField(default=False, verbose_name='Удалена?')),
                ('complex', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='main.complex', verbose_name='Жилой комплекс')),
            ],
            options={
                'verbose_name': 'акция',
                'verbose_name_plural': 'акции',
                'db_table': 'promos',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='HistoryFlat',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_created=True, auto_now_add=True, verbose_name='Дата создания')),
                ('source', models.CharField(max_length=10, verbose_name='Источник')),
                ('price', models.FloatField(default=0, verbose_name='Стоимость квартиры')),
                ('flat', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='main.flat', verbose_name='Квартира')),
            ],
            options={
                'verbose_name': 'история цен по квартире',
                'verbose_name_plural': 'истории цен по квартирам',
                'db_table': 'history_flats',
                'ordering': ['created_at'],
            },
        ),
        migrations.AddField(
            model_name='build',
            name='complex',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='main.complex', verbose_name='Комплекс'),
        ),
        migrations.AddField(
            model_name='build',
            name='developer',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='main.developer', verbose_name='Разработчик'),
        ),
        migrations.CreateModel(
            name='Article',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_created=True, auto_now_add=True, verbose_name='Дата создания')),
                ('title', models.CharField(blank=True, max_length=50, null=True, verbose_name='Название')),
                ('description', models.TextField(blank=True, null=True, verbose_name='Описание')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Дата обновления')),
                ('is_deleted', models.BooleanField(default=False, verbose_name='Удалена?')),
                ('build', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='main.build', verbose_name='Комплекс')),
            ],
            options={
                'verbose_name': 'новость',
                'verbose_name_plural': 'новости',
                'db_table': 'articles',
            },
        ),
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('phone', models.CharField(error_messages={'unique': 'Пользователь с данным телефоном уже существует'}, help_text='Обязательное. 15 символов или меньше.', max_length=15, unique=True, verbose_name='Номер телефона')),
                ('is_staff', models.BooleanField(default=False, verbose_name='Это сотрудник?')),
                ('is_active', models.BooleanField(default=True, verbose_name='Аккаунт активирован?')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='Когда присоединился')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'пользователь',
                'verbose_name_plural': 'пользователи',
                'db_table': 'users',
            },
            managers=[
                ('objects', main.models.user.UserManager()),
            ],
        ),
    ]
